plugins {
    id("com.android.application")
    id("dagger.hilt.android.plugin")
    id("kotlin-android")
    id("kotlin-kapt")
}

android {
    compileSdkVersion(rootProject.compileSdkVersion)
    buildToolsVersion = "30.0.2"

    defaultConfig {
        applicationId = "com.lemillion.minke"
        minSdkVersion(rootProject.minSdkVersion)
        targetSdkVersion(rootProject.targetSdkVersion)
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/build/schemas".toString()]
            }
        }
    }


    buildFeatures {
        dataBinding = true
        compose = true
    }
    buildTypes {
        getByName("release") {
            minifyEnabled = false
            proguardFiles(getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro')
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    composeOptions{
        kotlinCompilerExtensionVersion(rootProject.composeVersion)
    }
    kotlinOptions {
        jvmTarget = '11'

        // Enable Coroutines and Flow APIs
        freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
        freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.FlowPreview"
    }
    packagingOptions {
        // Multiple dependency bring these files in. Exclude them to enable
        // our test APK to build (has no effect on our AARs)
        excludes += "/META-INF/AL2.0"
        excludes += "/META-INF/LGPL2.1"
    }
}
dependencies {
    // Base dependencies
    implementation("androidx.core:core-ktx:$rootProject.coreKtxVersion")
    implementation("androidx.appcompat:appcompat:$rootProject.appcompatVersion")

    // Compose
    implementation("androidx.activity:activity-compose:$rootProject.activityVersion")
    implementation("androidx.compose.material3:material3:$rootProject.material3Version")
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:$rootProject.lifecycleVersion")
    implementation("androidx.compose.animation:animation:$rootProject.composeVersion")
    implementation("androidx.compose.foundation:foundation:$rootProject.composeVersion")
    implementation("androidx.compose.foundation:foundation-layout:$rootProject.composeVersion")
    implementation("androidx.compose.material:material:$rootProject.composeVersion")
    implementation("androidx.compose.material:material-icons-core:$rootProject.composeVersion")
    implementation("androidx.compose.material:material-icons-extended:$rootProject.composeVersion")
    implementation("androidx.compose.runtime:runtime:$rootProject.composeVersion")
    implementation("androidx.compose.runtime:runtime-livedata:$rootProject.composeVersion")
    implementation("androidx.compose.ui:ui:$rootProject.composeVersion")
    implementation("androidx.compose.ui:ui-tooling:$rootProject.composeVersion")
    implementation("com.google.android.material:compose-theme-adapter:$rootProject.composeVersion")

    // UI
    implementation("com.google.android.material:material:$rootProject.materialVersion")
    implementation("androidx.constraintlayout:constraintlayout:$rootProject.constraintLayoutVersion")

    // Room dependencies
    implementation("androidx.room:room-runtime:$rootProject.roomVersion")
    // To use Kotlin annotation processing tool (kapt)
    kapt("androidx.room:room-compiler:$rootProject.roomVersion")
    // Kotlin Extensions and Coroutines support for Room
    implementation("androidx.room:room-ktx:$rootProject.roomVersion")

    // Work Manager
    implementation("androidx.work:work-runtime-ktx:$rootProject.workVersion")

    // Gson
    implementation("com.google.code.gson:gson:$rootProject.gsonVersion")

    // lifecycle
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:$rootProject.lifecycleVersion")
    // ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.lifecycleVersion")
    // LiveData
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.lifecycleVersion")
    // Lifecycles only (without ViewModel or LiveData)
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:$rootProject.lifecycleVersion")
    // Saved state module for ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-savedstate:$rootProject.lifecycleVersion")

    // Dependency Injection
    implementation("com.google.dagger:hilt-android:$rootProject.hiltVersion")
    kapt("com.google.dagger:hilt-compiler:$rootProject.hiltVersion")

    // Navigation
    implementation("androidx.navigation:navigation-ui-ktx:$rootProject.navigationVersion")
    implementation("androidx.navigation:navigation-dynamic-features-fragment:$rootProject.navigationVersion")
    implementation("androidx.navigation:navigation-compose:$rootProject.navigationVersion")

    // Testing
    testImplementation("junit:junit:$rootProject.junitVersion")
    androidTestImplementation("androidx.test.ext:junit:$rootProject.junitExtVersion")
    androidTestImplementation("androidx.test.espresso:espresso-core:$rootProject.espressoVersion")
    testImplementation("androidx.room:room-testing:$rootProject.roomVersion")
    testImplementation("com.google.dagger:hilt-android-testing:$rootProject.hiltVersion")
    kaptTest("com.google.dagger:hilt-compiler:$rootProject.hiltVersion")
    androidTestImplementation("androidx.navigation:navigation-testing:$rootProject.navigationVersion")
    androidTestImplementation("androidx.compose.ui:ui-test-junit4:$rootProject.composeVersion")
    debugImplementation("androidx.compose.ui:ui-test-manifest:$rootProject.composeVersion")
}

// Allow references to generated code
kapt {
    correctErrorTypes true
}
